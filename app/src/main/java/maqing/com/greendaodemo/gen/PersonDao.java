package maqing.com.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import maqing.com.greendaodemo.entity.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Void> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Weight = new Property(1, double.class, "weight", false, "WEIGHT");
        public final static Property Height = new Property(2, double.class, "height", false, "HEIGHT");
        public final static Property Age = new Property(3, int.class, "age", false, "AGE");
    };


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"WEIGHT\" REAL NOT NULL ," + // 1: weight
                "\"HEIGHT\" REAL NOT NULL ," + // 2: height
                "\"AGE\" INTEGER NOT NULL );"); // 3: age
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindDouble(2, entity.getWeight());
        stmt.bindDouble(3, entity.getHeight());
        stmt.bindLong(4, entity.getAge());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindDouble(2, entity.getWeight());
        stmt.bindDouble(3, entity.getHeight());
        stmt.bindLong(4, entity.getAge());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getDouble(offset + 1), // weight
            cursor.getDouble(offset + 2), // height
            cursor.getInt(offset + 3) // age
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWeight(cursor.getDouble(offset + 1));
        entity.setHeight(cursor.getDouble(offset + 2));
        entity.setAge(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Person entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Person entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
